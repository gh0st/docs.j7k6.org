I"ì%<p><a href="https://www.scaleway.com/"><strong>Scaleway</strong></a> offers some cheap baremetal x86 servers (<em>C2S</em>, <em>C2M</em>, <em>C2L</em>). Since this servers are not virtualized, there is no way an encryption key can be leaked to a hypervisor. So unlike normal (virtualized) cloud VPS‚Äôs, <em>Full Disk Encryption</em> is much more secure on a baremetal server, because you ‚Äúown‚Äù the hardware (yes, only theoretically, direct access to the hardware is still an attack surface, but the desired level of security depends on the threat model).</p>

<p>In this post I will describe how I managed to get a <em>Ubuntu Server</em> running on a <em>LUKS</em>-encrypted disk on a <em>baremetal</em> Scaleway server.</p>

<blockquote>
  <p><strong>Note</strong>: The <em>C2S</em> and <em>C2M</em> server models use a <em>Network Block Device</em> (<strong>/dev/nbdX</strong>), while the <em>C2L</em> model uses a directly attached SSD (<strong>/dev/sdX</strong>). This post focuses on the <em>NBD</em> disks.</p>
</blockquote>

<h2 id="prerequirements">Prerequirements</h2>
<p>Visit the <em>Scaleway</em> <a href="https://cloud.scaleway.com">Dashboard</a> to create a new <strong>Baremetal</strong> (<strong>x86</strong>) server.</p>

<ol>
  <li>Server range: <code class="highlighter-rouge">Baremetal</code> -&gt; <code class="highlighter-rouge">X86</code> -&gt; <code class="highlighter-rouge">C2M</code></li>
  <li>Choose an image: <code class="highlighter-rouge">Ubuntu Xenial</code></li>
  <li>Additional volumes: <code class="highlighter-rouge">150GB</code></li>
</ol>

<p><img src="/files/scaleway-baremetal-ubuntu-server-full-disk-encryption/scaleway-01.png" alt="scaleway-01.png" /></p>

<h3 id="optional-change-kernel">(Optional) Change Kernel</h3>
<p>Usually, the default kernel is a little bit older, to change it to a more recent one, the <em>Bootscript</em> needs to be changed:
<img src="/files/scaleway-baremetal-ubuntu-server-full-disk-encryption/scaleway-02.png" alt="scaleway-02.png" /></p>

<p>After changing the kernel, the server needs to <em>hard reboot</em>.</p>

<hr />

<h2 id="server-installation">Server Installation</h2>
<p>After the new server booted up completely, it‚Äôs time to SSH into it.</p>

<h3 id="system-packages">System Packages</h3>
<p>First, update the servers packages and install additional requirements:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive 
apt-get update 
apt-get upgrade <span class="nt">-y</span>
apt-get <span class="nb">install</span> <span class="nt">-y</span> gdisk parted cryptsetup
</code></pre></div></div>

<h3 id="disk-setup">Disk Setup</h3>
<ol>
  <li>Create partition table:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sgdisk <span class="nt">-og</span> /dev/ndb1 
sgdisk <span class="nt">-n</span> 1:0:0 <span class="nt">-t</span> 1:8300 /dev/nbd1
partprobe
</code></pre></div>    </div>
  </li>
  <li>Encrypt disk:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cryptsetup <span class="nt">-c</span> aes-xts-plain64 <span class="nt">-y</span> <span class="nt">-s</span> 512 <span class="nt">-h</span> sha512 luksFormat /dev/nbd1 
cryptsetup luksOpen /dev/nbd1 ubuntu
</code></pre></div>    </div>
  </li>
  <li>Format encrypted partition:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkfs.ext4 <span class="nt">-L</span> root <span class="nt">-m</span> 0 /dev/mapper/ubuntu
</code></pre></div>    </div>
  </li>
  <li>Mount:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount /dev/mapper/ubuntu /mnt 
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="ubuntu-setup">Ubuntu Setup</h3>
<p>Many tutorials would now introduce <em>debootstrap</em>, <em>proc</em>-binds and complicated setups-from-scratch, but since I want to keep it as simple as possible I just copied the existing Scaleway Ubuntu installation to the encrypted disk:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> <span class="nt">-avx</span> / /mnt
</code></pre></div></div>

<p>After that, the <code class="highlighter-rouge">/etc/fstab</code> file needs to be set up:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"/dev/mapper/ubuntu / ext4 defaults 0 1"</span> <span class="o">&gt;</span> /mnt/etc/fstab
</code></pre></div></div>

<p>And that‚Äôs it!
Now cleanly unmount everything:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>umount /mnt
cryptsetup luksClose ubuntu
</code></pre></div></div>

<h3 id="switch-boot-device">Switch Boot Device</h3>
<p>After finishing the encrypted disk setup, the initial 50GB disk isn‚Äôt needed anymore, so it can be removed from the server completely.</p>

<ol>
  <li>Power off / Archive (this takes some time)</li>
  <li>Detach both volumes</li>
  <li>Re-attach the <code class="highlighter-rouge">ubuntu-xenial-cryptroot</code> disk</li>
</ol>

<p>Now the fully encrypted Ubuntu server is nearly ready to use!</p>

<hr />

<h2 id="remote-unlock">Remote Unlock</h2>

<h3 id="activate-ssh-on-boot">Activate SSH on Boot</h3>
<p>To remotely unlock the disk and boot from it, the lightweight SSH server <em>dropbear</em> needs to be activated. This can be done in the Scaleway Dashboard by adding a new <em>Tag</em> to the server: <code class="highlighter-rouge">INITRD_DROPBEAR=1</code>.
After adding the tag, power-on the server.</p>

<h3 id="unlock-disk">Unlock Disk</h3>
<p>The <code class="highlighter-rouge">INITRD_DROPBEAR=1</code> tag forces the boot process to stop and drop a busybox shell which is available via SSH.</p>

<blockquote>
  <p><strong>Note</strong>: Use <code class="highlighter-rouge">ssh root@&lt;$SERVER&gt; -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null</code>, or else the SSH client will complain about changed Host keys everytime the server is rebooted.</p>
</blockquote>

<p>Unfortunately, Scaleway doesn‚Äôt support <em>LUKS</em> out of the box in its boot stage. So before unlocking the encrypted disk and booting, the <code class="highlighter-rouge">cryptsetup</code> binary has to be installed in <em>busybox</em>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-qO-</span> http://dl-3.alpinelinux.org/alpine/latest-stable/main/x86_64/apk-tools-static-2.9.1-r2.apk | <span class="nb">tar </span>zxvf - <span class="nt">-C</span> /
/sbin/apk.static add <span class="nt">-X</span> http://dl-cdn.alpinelinux.org/alpine/edge/main <span class="nt">--update</span> <span class="nt">--initdb</span> <span class="nt">--allow-untrusted</span> cryptsetup
</code></pre></div></div>

<p>Now load the needed kernel modules:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> /lib/modules/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>
wget <span class="nt">-qP</span> /lib/modules/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/ http://mirror.scaleway.com/kernel/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/modules/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/kernel/drivers/md/dm-mod.ko
wget <span class="nt">-qP</span> /lib/modules/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/ http://mirror.scaleway.com/kernel/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/modules/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/kernel/drivers/md/dm-crypt.ko
wget <span class="nt">-qP</span> /lib/modules/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/ http://mirror.scaleway.com/kernel/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/modules/<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-r</span><span class="si">)</span>/kernel/crypto/xts.ko <span class="c"># Thanks for the update @Alex / 2018-08-21</span>
depmod <span class="nt">-a</span>
</code></pre></div></div>

<p>‚Ä¶and finally decrypt the Ubuntu disk, mount the volume and continue the boot process:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/sbin/cryptsetup luksOpen /dev/nbd0 ubuntu
mount /dev/mapper/ubuntu /newroot
<span class="k">continue</span><span class="nt">-boot</span>
</code></pre></div></div>

<hr />
<ol>
  <li><strong>TODO</strong>: automate unlocking</li>
</ol>
:ET