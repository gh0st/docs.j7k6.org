I"<p>As a sequel to <a href="/my-minimal-vimrc/">‘<em>My Minimal .vimrc</em>’</a>, this is a little write-up about my <strong>Tmux</strong> setup, which I also like to keep as simple as possible.</p>

<p>In my traditional minimalistic approach to only use the config I <em>understand</em> and <em>need</em>, my <code class="highlighter-rouge">.tmux.conf</code> is not much longer than <strong>30 SLOC</strong>…</p>

<h2 id="general-settings">General Settings</h2>
<p>It starts with the usual rebinding of the <em>Prefix key</em>, which is <code class="highlighter-rouge">Ctrl+B</code> by default, but I guess 99% of all <em>Tmux</em> users change it to <code class="highlighter-rouge">Ctrl+A</code> for some good reason (it’s the same in <code class="highlighter-rouge">screen</code>, it’s easier to type…):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set -g prefix C-a                         # prefix key
set -g default-terminal "screen-256color" # terminal type
set -g aggressive-resize on               # aggressive resize
set -sg escape-time 0                     # escape time
set -g base-index 1                       # set initial window index to 1
set -g mouse on                           # enable mouse support
set -g bell-action none                   # disable bell
setw -g xterm-keys on                     # enable xterm keys
setw -g mode-keys vi                      # enable vi mode keys
</code></pre></div></div>

<p>the last line (<code class="highlighter-rouge">mode-keys vi</code>) is very important to me, because it makes <em>vim</em>-style key-actions possible in <em>Tmux</em>! This awesome feature makes Copy &amp; Pasting from inside <em>Tmux</em> to whatever application really simple. It basically works like the <em>vim</em> <em>Visual Mode</em>.</p>

<h2 id="vim-like-copy--paste">Vim-like Copy &amp; Paste</h2>
<p>To get into <em>vim</em>-mode, just press the <code class="highlighter-rouge">Esc</code>-key (or <code class="highlighter-rouge">PgUp|Down</code>) after the <em>prefix key</em>. All the <em>vim</em> key-combinations work here (<code class="highlighter-rouge">v</code>, <code class="highlighter-rouge">V</code>, <code class="highlighter-rouge">y</code>, <code class="highlighter-rouge">yy</code>,…).</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bind Escape copy-mode
bind p paste-buffer
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
</code></pre></div></div>

<h2 id="status-bar">Status Bar</h2>
<p>Like in <em>vim</em> (no statusline, ruler only), I also choose to go an unorthodox path by having the <em>Tmux</em> status bar in the top of the screen. This way it doesn’t intefere visually with my <em>vim</em> ruler line and it’s also more like the menu bar in macOS (top) then the task bar in Windows (bottom).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set -g status-position top               # statusbar position
set -g status-interval 1
set -g window-status-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})'
set -g window-status-current-format '[#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})]'
set -g status-right-length 120
set -g status-right '#(date +"%b %_d %H:%M") | #(whoami)@#(hostname -s) '
set -g window-status-current-attr bold
</code></pre></div></div>

<p>The <em>status bar</em> is also kept pretty much as simple as possible. Only extra inforamtion are date/time display and <code class="highlighter-rouge">username@hostname</code> (so I know where I am).</p>

<h2 id="key-bindings">Key Bindings</h2>
<p>I only use a handful of key bindings for splitting windows, create and close windows and panes. Nothing fancy.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bind ! split-window -h -c "#{pane_current_path}" # split horizontally
bind - split-window -v -c "#{pane_current_path}" # split vertically
bind n new-window                                # open new window
bind x kill-pane                                 # kill pane without confirmation
bind k kill-window                               # kill window
bind q kill-session                              # kill session
bind r source-file ~/.tmux.conf                  # reload tmux config
bind t select-layout tiled                       # tiled layout
</code></pre></div></div>

<h2 id="extras">Extras</h2>
<p>And this is the end of my <code class="highlighter-rouge">.tmux.conf</code>.
The last line checks if I’m in a SSH session and paints the status bar red to remind me that I might be ind dangerous places:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if-shell 'test "$SSH_CONNECTION"' 'set -g status-bg red'
</code></pre></div></div>

<hr />
<ol>
  <li><a href="https://github.com/j7k6/dotfiles">My Dotfiles Repo</a></li>
</ol>
:ET